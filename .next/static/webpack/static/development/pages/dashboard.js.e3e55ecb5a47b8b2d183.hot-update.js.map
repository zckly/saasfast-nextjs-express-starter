{"version":3,"file":"static/webpack/static/development/pages/dashboard.js.e3e55ecb5a47b8b2d183.hot-update.js","sources":["webpack:///./pages/dashboard.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport SecureTemplate from '../static/secure-template';\nimport Router from 'next/router'\nimport Link from 'next/link'\nimport moment from 'moment'\nimport { Grid, Card, Button, Image, Popup } from 'semantic-ui-react'\nfunction titleCase(str) {\n  return str.toLowerCase().split(' ').map(function(word) {\n    return word.replace(word[0], word[0].toUpperCase());\n  }).join(' ');\n}\nfunction truncateString(str, len) {\n  if (str.length > len)\n    return str.substring(0,len)+'...';\n else\n    return str;\n}\n\nclass Dashboard extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      newQuery: '',\n      data: [],\n      clickedId: '',\n      intention: '',\n      isOpen: false\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.submitNewQuery = this.submitNewQuery.bind(this)\n    // this.turnOnAlert = this.turnOnAlert.bind(this)\n    // this.turnOffAlert = this.turnOffAlert.bind(this)\n\n  }\n  componentDidMount() {\n    if (this.props.isLoggedIn) {\n      fetch(this.props.origin + '/fetch_dashboard', {\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          method: \"POST\",\n          body: JSON.stringify({user:this.props.loggedInUser})\n      })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data['success']) {\n          this.setState({data: data['data']})\n        } else {\n          this.setState({data: []})\n        }\n      })\n    }\n  }\n  handleOpen = () => {\n    this.setState({isOpen: true})\n  }\n  handleClose = () => {\n    this.setState({isOpen: false})\n  }\n  handleKeyPress = (evt) => {\n    if (evt.key === 'Enter') {\n      this.submitNewQuery(evt)\n    }\n  }\n  handleChange (evt) {\n    this.setState({ [evt.target.name]: evt.target.value });\n  }\n  submitNewQuery (evt) {\n    evt.preventDefault()\n    if (this.state.newQuery.length) {\n      Router.push(`/checkout?q=${encodeURIComponent(this.state.newQuery)}`, `/checkout/${encodeURIComponent(this.state.newQuery)}`)\n    } else {\n\n    }\n  }\n  turnOnAlert = (id) => {\n    this.setState({clickedId: id, intention: 'activate'})\n  }\n  turnOffAlert = (id) => {\n    this.setState({clickedId: id, intention: 'deactivate'})\n  }\n  deleteAlert = (id) => {\n    this.setState({clickedId: id, intention: 'delete'})\n  }\n  handleConfirmation = () => {\n    fetch(origin + '/queries/' + this.state.intention, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({query_id:this.state.clickedId, user:this.props.loggedInUser})\n    })\n    .then((response) => response.json())\n    .then((data) => {\n      if (data['success']) {\n        this.setState({data: data['data'], isOpen: false})\n      } else {\n        console.log('error when querying ' + this.state.intention)\n        this.setState({ isOpen: false })\n      }\n    })\n  }\n  render() {\n    const {data} = this.state\n    var items = []\n    for (var i = 0; i < data.length; i++) {\n      (function(that, i) {\n        let x = data[i]\n        items.push(\n        <Grid.Column textAlign='left' float='right' key={x._id} >\n          <Card  >\n            <Card.Content>\n              <Image size='mini' floated='left' src={x.recent_results.length ? x.recent_results[0].image_link : 'http://react.semantic-ui.com/images/wireframe/image.png'} />\n              <Card.Header>{titleCase(x.searchQuery)}</Card.Header>\n              <Card.Description>\n                <Link href={x.recent_results.length ? x.recent_results[0]['listing_link'] : ''}><a><h5>{x.recent_results.length ? truncateString(x.recent_results[0]['name'], 42) : ''}</h5></a></Link>\n                {x.recent_results.length ? (\n                  <div>\n                    <h4>\n                    {~x.recent_results[0].new_price ? '$' + x.recent_results[0].new_price : '$' + x.recent_results[0].original_price}\n                    </h4>\n                    <p>\n                    {'Found on ' + x.recent_results[0].source + ' at'}\n                    </p>\n                    <p>\n                    {moment(x.recent_results[0].found_time).format(\"dddd, MMMM Do, h:mm a\")}\n                    </p>\n                  </div>) : (<div><h5>No new items have been found yet.</h5><br/><br/><br/><br/><br/>\n                </div>)}\n            </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n              <div className='ui two buttons attached'>\n                {x.active ? (\n                  <Popup\n                      trigger={<Button inverted color='green' icon='toggle on' content='On' onClick={that.turnOffAlert.bind(that, x._id)} />}\n                      content={<Button color='green' onClick={that.handleConfirmation} content='Confirm' />}\n                      open={this.state.isOpen}\n                      on='click'\n                      position='top right'\n                      onClose={that.handleClose}\n                    />\n                  ) : (\n                  <Popup\n                      trigger={<Button inverted color='red' icon='toggle off' content='Off' onClick={that.turnOnAlert.bind(that, x._id)} />}\n                      content={<Button color='green' onClick={that.handleConfirmation} content='Confirm' />}\n                      on='click'\n                      position='top right'\n                      onClose={that.handleClose}\n                    />\n                )}\n                <Popup\n                    trigger={<Button color='red' icon='delete' onClick={that.deleteAlert.bind(that, x._id)} content='Delete'/>}\n                    content={<Button color='green' onClick={that.handleConfirmation} content='Confirm' />}\n                    on='click'\n                    position='top right'\n                    onClose={that.handleClose}\n                  />\n              </div>\n            </Card.Content>\n          </Card>\n        </Grid.Column>\n      )\n      })(this, i);\n    }\n    \n    return (\n      <div className=\"dashboard-page\">\n        \n        <input className=\"input-field\" id='newQuery' onKeyPress={this.handleKeyPress} onChange={this.handleChange} type=\"text\" name=\"newQuery\" value={this.state.newQuery} placeholder='Maison Margiela Tabi' /> \n        <br />\n        <div className=\"newQueryButton button\" onClick={this.submitNewQuery}>\n          <span className=\"button__mask\" />\n          <span className=\"button__text\" id=\"query_button\">Monitor Item</span>\n        </div>\n        <br/>\n        <h2>My Items</h2>\n        <div className='table'>\n          <Grid stackable centered relaxed columns={3}>\n            {items}  \n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SecureTemplate(Dashboard);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAoCA;AAAA;AAAA;AACA;AACA;AAtCA;AAuCA;AAAA;AAAA;AACA;AACA;AAzCA;AA0CA;AACA;AACA;AACA;AACA;AA9CA;AA0DA;AAAA;AAAA;AAAA;AACA;AACA;AA5DA;AA6DA;AAAA;AAAA;AAAA;AACA;AACA;AA/DA;AAgEA;AAAA;AAAA;AAAA;AACA;AACA;AAlEA;AAmEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AAAA;AANA;AAQA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAnFA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AACA;AAbA;AAcA;AACA;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AANA;AAQA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAYA;AACA;AACA;;;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;;;AA6BA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAgBA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AANA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAYA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAxKA;AACA;AA0KA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}